고생한 것 정리

Sprite Class 전반적으로 게속 수정함
	- 이미지 회전 - 어떠한 좌표값을 기준으로
	- 알파 블랜드와 트랜스퍼런트를 동시에 적용하게 했다.
	- 프레임을 쉽게 쓸 수 있도록 했다.
	- 알파 블랜드와 트랜스퍼런트를 같이 할때, 배경의 DC를 불러오게 하는데,
		이때 알파블랜드가 배경DC안에 있지 않고, 살짝 외부로 나오게 되면 처리가 되지 않는다.
		이를 좌표 계산으로 처리했다.;

HeapDebugClass
	- 이 프로젝트에서는 힙 메모리는 모두 무조건 HeapDebugClass의 
		HeapNew 와 HeapDelete, HeapArrNew, HeapArrDelete를 사용한다.
		새로운 힙이 할당되 때마다 그 힙메모리의 포인터를 map에 true로 넣는다.

		HeapNew 내부
		//
		Object* obj = new Object();
		HeapDebug[ptr] = true;
		//

		그러면 나중에 해제가 될때 ptr위치가 true인 경우는 해제할 수 있는 경우, 
			false면 이미 해제된 경우가 되어 혹여 댕글링 포인터가 생기더라도 
			두번 해제하는 경우는 없어진다.
		힙이 헤제될 때 map에서 그 포인터의 위치를 false 시킨다.

		HeapDelete 내부
		//
		if(HeapDebug[ptr] == true) {
			delete ptr;
			HeapDebug[ptr] = false;
		}
		//

		힙이 몇개가 남아있는지 확인하는 함수를 작성해 개발중 프로그램이 꺼질때
		남아있는 힙의 개수를 출력한다. 0이 남아야 정상적인 것이고, 0이 남지 않으면, 
		뭔가가 잘못되었다는 것을 알 수 있다.

		보통 함수 밖에서도 보존되는 클래스를 할당할려면, 힙에 할당하는 것이 일반적인데,
		
		그 이유는 스택에 할당을 하게 되면,
		함수에서 나갈때, 
		그 포인터 변수는 값이 있어도, 그 값을 주소로 가지는 변수는 이미 자동으로 해제되었기 때문에
		사용할 수 없기 때문이다.

		그렇다고 데이터에 할당을 하게되면, 유동적으로 몇개만 할당하기가 어려워,
		상황에 따라 할당하는 변수를 게속 써야 하거나, 사용할 메모리를 처음부터 할당해야 한다.
		그렇게 되면, 너무나 많은 메모리를 미리 할당하게 되기 때문에 메모리 낭비가 된다. 

		그래서 클래스의 인스턴스를 할당하면 거의 힙에 할당을 하게 된다.
		하지만, 여기에서 이 함수를 쓰게 되면 생기는 문제점이 있는데,
		바로 기존 new, delete에 비해 아주 번거롭다는 것이다.

		만약 클래스의 특정한 생성자로 인스턴스를 생성하고 싶다면, 이 함수로는 불가능하다.
		왜냐하면, 클래스마다 함수의 인자의 개수와 종류가 확연히 다르기 때문에, 하나의 함수로 이것을 담기가 어렵다.

		그렇기 때문에 이 함수를 쓰면 클래스를 만들때 부터 원칙이 하나 더 생기고 만다.
		항상 Object* Init( ... ); 함수를 만드는 원칙이다.
		이 함수가 클래스들 마다 따로따로 만들어 지면,
		조금 복잡하긴 하지만, 이렇게 쓰는 것으로 new와 delete를 대체 가능하다.

		HeapNew<Object>()->Init();
		//이렇게 되면 오브젝트를 생성하자마자 Init이 호출되기 때문에 원하는 생성자를 Init으로 만들 수 있다.

Animation
	애니메이션 클래스는 그냥 함수들의 묶음이다.
	그리고 하나의 float 함수를 0에서 1로 이동시키는 3가지 함수만이 존재한다.
	이 3가지의 함수는 사용 용도의 본질이 같다. 거의 같은 함수라 보면 된다.

	EaseIn - 느리게 출발 빠르게 도착
	EaseOut - 빠르게 출발 느리게 도착
	EaseIO - 느리게 출발 빠르게 중간을 지나 느리게 도착

	거의 모든 변수에 적용해 편리하게 사용 가능하다.

SpaceMath
	2차원 공간의 수학을 계산한다.
	shp이라는 네임스페이스를 가지고 있어 shp::...이런 코드가 있음 여기에서 돌아간다고 생각하자.
	shp::vec2f - 점, 방향, 두 변수, flow(flow, max)
	shp::rect4f - 직사각형
	shp::angle2f - 각도

	진짜 편리하도록 구성했다.

Game
	GameObject와 GameManager가 있는데, GameObject는 게임속 다양한 오브젝트들의 부모, 추상 클래스이고,
	GameManager는 GameObject를 관리하는 클래스이다.

	GameObject는 버그의 출현률을 줄이기 위해
	만들때의 원칙이 있다.

	1. enable이 false이면, enable변수를 제외한 모든 맴버변수에 접근을 절대로 금지한다.
		- 때문에 맴버변수에 접근하려면 Get, Set함수를 통해서 접근하고, 
			만약 enable == false 라면, Get은 디폴트 값을 리턴하고, Set은 작동하지 않는다.
	2. enable이 false이면, 모든 함수가 작동하지 않는다.
	3. GameManager에서 오브젝트의 enable이 false라는 것을 알면, 바로 해제시키고, 그 자리를 nullptr로 체운다.

	이렇게 해서 해당 오브젝트를 없앨때 버그를 피할 수 있다.

원칙
1. 힙에 관련된 처리를 할 때는 항상 HeapDebugClass 사용 (new, delete 사용 금지)
2. GameManager안에서 관리되는 GameObject는 모두 힙
3. 할 수 있는 한 const 많이 쓰기
4. 맴버변수는 enable == true일 때만 접근가능, 맴버함수는 enable == false면 작동 안하게 하기
5. 하나의 체널에 하나의 사운드만 연결시키기
6. 힙으로 만들어야 하는 클래스들은 항상 Init 함수가 있어야 함.
7. 모든 게임오브젝트들은 오브젝트의 타입변수를 가져야 함.
8. 만약 Init 시에 GameManager에 접근해야 하는 일이 생기면, 
	FristInit이라는 함수를 만들어 따로 관리한다. Update 첫번째 에서 한번만 실행되도록 한다.
		이제껏 써야 했던 상황들 : 
			1. 맴버 GameObject 인스턴스가 GameManager에서 관리될때
9. FirstInit 함수가 있을 경우, enable == true, first == false 일때 함수가 작동되도록 하자.

//버전1
2. SetPosition에서 ROTPOS 조정오류 - fix
3. 저장하고 플레이가 안되는 오류 - 노트 한번 추가하고 실행하면 됨 - 안고쳤는데 고쳐짐;;
4. 옆에 나오는 롱노트 - fix
5. 롱노트에 배경 임팩트가 좀 큰것 같음 - fix
6. 콤보랑 점수 안나오는거 고치기 - fix
7. 스페ㅔ이스 노트 포지션 선정 오류 - fix


//버전2
8. 오래동안 프로그램을 키면 너무 많은 메모리를 잡아먹을 우려가 있어 이를 바로잡음 - fix
9. 에디트에서 노래를 먼저 불러와야지만 정상 작동한다. - 이거 고칠 필요 있나?
10. 싱크조절을 SetVariable에 넣어 조절하게 해라.
10. edit, play에 일반 > 롱 > 스페이스 - fix

////////////////////////////////////////////////////////
show
1. EdgeSpreadEF
	param
	0. 
		0 - bottom
		1 - left
		2 - top
		3 - right
	1. 파워
2. LineDiamondRotateEF
	param
	0. 
		0 - 시계방향
		1 - 시계반대방향
	1. 파워
3. ExplosionEF
	param
	0. x좌표
	1. y좌표
	2. 파워
4. FlashEF
	0. maxtime
5. LineDirEF
	1. dir
	2. maxtime
5. ChangeSpeed
	0. speed
	1. power
6. ChangeLineWid
	0. resultWid
7. LetterParticleEffect - ? ㄱㄴ?
////////////////////////////////////////////////////////
만들 데이터

1. 플레이어 데이터
	- 가진 게임머니
	- 총 점수
	- 총 풀콤보
	- 소지한 노래 개수
	- 지금 장착한 아이템
	- 지금 장착한 칭호
	- 이지 랭크 개수 (M, S, A, B, C, D, E, F)
	- 노멀 랭크 개수 (M, S, A, B, C, D, E, F)
	- 하드 랭크 개수 (M, S, A, B, C, D, E, F)
	- [곡 제목 - bpm - 길이 - 작곡자 - 패턴제작자 - 앨범아트제작자 - 난이도 - 노트개수] - (곡정보) 
		[최고랭크, 최고점수, 풀 콤보 유무, perfect, good, miss 개수] - ( 성과 ) 이렇게 된 줄의 연속
	- 가진 아이템 개수와 정보
		: 아이템 이름, 스프라이트ID, EXP, HP, Heal, Damage, money
	- 칭호와 도전과제, 진행률
	- 설정 변수 값들
		: 싱크
		: 노래 / 타격음 / 효과음 음량
		: 기본 속도


레벨 초기 데이터
2
ChartreuseGreen_H 180 131 t+pazolite RUBY t+pazolite 0 815 0 0 0 0 0 0
Momijinosakamichi 100 131 Wizet NO_ Wizet 0 815 0 0 0 0 0 0
Hiatus_Departure 200 126 Aoi RUBY suke 0 1130 0 0 0 0 0 0
RaSeed 130 152 Aoi RUBY suke 0 789 0 0 0 0 0 0

고칠거
2. 설정값 적용
3. 크레딧 만들기
5. 프로필 만들기
6. 상점 만들기
7. 점수 계산 정확히 하기
8. 회전된 이미지 미리 만들어두고 출력
9. Evaluation 페이지 구성하기
	- perfect, good, miss 개수
	- 풀콤보 여부
	- 경험치?
10. 레벨에 따라 곡이 해금되면 좋겠음?
11. 계획한 이팩트 만들기 - 토데 마련 게속 만들기 가능

할거
1. 하나더 쉬운걸로 만들기
2. 일반노트 치다가 롱노트 나오면 미스뜨는 오류 고치기
3. 기존에 있던 거 1개 이팩트 추가?
4. 설정 적용 / 없는 메뉴 빼기
5. 크레딧 만들기

////////////////////////////////////
credit

한국공학대학교 윈도우 프로그래밍 12팀
Otornait

프로그래밍 : 노훈철
기획 : 노훈철, 이창민
아트 : 노훈철, 이창민
노트데이터 : 노훈철, 이창민

노래수급 : 노훈철, 이창민
ChartreuseGreen_H : t+pazolite
Hiatus_Departure : Aoi
RaSeed : Aoi

작곡 : 노훈철
day20
Rift

곡 배경 이미지 : 
Rift : lumberjacck (WallHeaven - https://whvn.cc/j5oqqq)
day20 : JustJon (WallHeaven -  https://whvn.cc/1kjyjv)
그 이외 : suke

사운드 시스템 : FMOD SoundSystem
개발 언어 : C++
API : Windows

Icon from. Iconfinder

플레이 해주셔서 감사합니다.
////////////////////////////////